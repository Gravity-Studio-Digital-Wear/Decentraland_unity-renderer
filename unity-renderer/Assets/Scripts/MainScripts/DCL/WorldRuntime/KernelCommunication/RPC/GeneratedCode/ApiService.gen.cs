// AUTOGENERATED, DO NOT EDIT
// Type definitions for server implementations of ports.
// package: Proto
// file: api.proto

using System.Collections.Generic;
using Cysharp.Threading.Tasks;
using Google.Protobuf;
using rpc_csharp.protocol;
using rpc_csharp.server;

namespace Proto {

public abstract class CRDTService<Context>
{
  public const string ServiceName = "CRDTService";

  public delegate UniTask<CRDTResponse> SendCRDT(CRDTManyMessages request, Context context);

  public delegate IEnumerator<CRDTManyMessages> CRDTNotificationStream(CRDTStreamRequest request, Context context);

  public static void RegisterService(RpcServerPort<Context> port, SendCRDT sendCRDT, CRDTNotificationStream cRDTNotificationStream)
  {
    var result = new ServerModuleDefinition<Context>();
      
    result.definition.Add("SendCRDT", async (payload, context) => { var res = await sendCRDT(CRDTManyMessages.Parser.ParseFrom(payload), context); return res?.ToByteString(); });
    result.streamDefinition.Add("CRDTNotificationStream", (payload, context) =>
    {
        return ProtocolHelpers.SerializeMessageEnumerator( cRDTNotificationStream(CRDTStreamRequest.Parser.ParseFrom(payload), context));
    });

    port.RegisterModule(ServiceName, (port) => UniTask.FromResult(result));
  }
    
}
}
